import 'dart:developer';import 'package:chatgpt/constant/constant.dart';import 'package:chatgpt/models/chat_model.dart';import 'package:chatgpt/providers/chat_provider.dart';import 'package:chatgpt/providers/models_provider.dart';import 'package:chatgpt/services/api_service.dart';import 'package:chatgpt/services/assets_manager.dart';import 'package:chatgpt/services/services.dart';import 'package:chatgpt/widgets/text_widget.dart';import 'package:flutter/material.dart';import 'package:flutter_spinkit/flutter_spinkit.dart';import 'package:provider/provider.dart';import '../widgets/chat_widget.dart';class ChatScreen extends StatefulWidget {  const ChatScreen({Key? key}) : super(key: key);  @override  State<ChatScreen> createState() => _ChatScreenState();}class _ChatScreenState extends State<ChatScreen> {  bool _isTyping = false;  late TextEditingController textController;  late FocusNode focusNode;  late ScrollController _listScrollController;  @override  void initState() {    // TODO: implement initState    textController = TextEditingController();    focusNode = FocusNode();    _listScrollController = ScrollController();    super.initState();  }  @override  void dispose() {    textController.dispose();    focusNode.dispose();    _listScrollController.dispose();    super.dispose();  }  @override  Widget build(BuildContext context) {    final modelsProvider = Provider.of<ModelsProvider>(context);    final chatProvider = Provider.of<ChatProvider>(context);    return Scaffold(        appBar: AppBar(          elevation: 2,          leading: Padding(            padding: const EdgeInsets.all(8.0),            child: Image.asset(AssetsManager.openaiLogo),          ),          title: const Text("ChatGPT"),          actions: [            IconButton(                onPressed: () async {                  await Services.showModalSheet(context: context);                },                icon: const Icon(Icons.more_vert_rounded, color: Colors.white))          ],        ),        body: SafeArea(            child: Column(          children: [            Flexible(                child: ListView.builder(                    controller: _listScrollController,                    itemCount: chatProvider.getChatList.length,                    itemBuilder: (context, index) {                      return ChatWidget(                        msg: chatProvider.getChatList[index].msg,                        chatIndex: chatProvider.getChatList[index].chatIndex,                      );                    })),            if (_isTyping) ...[              const SpinKitThreeBounce(                color: Colors.white,                size: 18,              ),            ],            const SizedBox(height: 15),            Material(                color: cardColor,                child: Padding(                  padding: const EdgeInsets.all(8.0),                  child: Row(                    children: [                      Expanded(                          child: TextField(                        controller: textController,                        onSubmitted: (value) {                          //To Do send message                        },                        style: TextStyle(color: Colors.white),                        decoration: const InputDecoration.collapsed(                            hintText: "How can I help you?",                            hintStyle: TextStyle(color: Colors.black)),                      )),                      IconButton(                          onPressed: () async {                            sendMessageFunction(                                modelsProvider: modelsProvider,                                chatProvider: chatProvider);                          },                          icon: Icon(Icons.send, color: Colors.white))                    ],                  ),                ))          ],        )));  }  void scrollListToEnd() {    _listScrollController.animateTo(        _listScrollController.position.maxScrollExtent,        duration: const Duration(seconds: 2),        curve: Curves.easeInOut);  }  Future<void> sendMessageFunction(      {required ModelsProvider modelsProvider,      required ChatProvider chatProvider}) async {    if (_isTyping) {      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(        content: TextWidget(label: "you cannot send multiple message"),        backgroundColor: Colors.redAccent,      ));      return;    }    if (textController.text.isEmpty) {      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(        content: TextWidget(label: "please type a message"),        backgroundColor: Colors.redAccent,      ));      return;    }    try {      String message = textController.text;      setState(() {        _isTyping = true;        chatProvider.addUserMessage(msg: message);        textController.clear();        focusNode.unfocus();      });      await chatProvider.sendMessageAndGetAnswers(          msg: message, modelId: modelsProvider.getCurrentModel);      setState(() {});    } catch (e) {      log("Error $e");      ScaffoldMessenger.of(context).showSnackBar(SnackBar(        content: TextWidget(label: e.toString()),        backgroundColor: Colors.redAccent,      ));    } finally {      setState(() {        scrollListToEnd();        _isTyping = false;      });    }  }}