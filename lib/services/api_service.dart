import 'dart:convert';import 'dart:developer';import 'dart:io';import 'package:chatgpt/constant/constant.dart';import 'package:chatgpt/models/Models.dart';import 'package:chatgpt/models/chat_model.dart';import 'package:http/http.dart' as http;class ApiService {  static Future<List<ModelsModel>> getModels() async {    try {      var response = await http.get(Uri.parse('$BASE_URL/models'), headers: {        'Authorization': 'Bearer $Authorization',      });      Map jsonResponse = jsonDecode(response.body);      if (jsonResponse['error'] != null) {        print("Json Error $jsonResponse['error']['message']");        throw HttpException(jsonResponse['error']['message']);      }      List temp = [];      for (var value in jsonResponse['data']) {        temp.add(value);      }      return ModelsModel.modelFromSnapshot(temp);    } catch (e) {      log("error $e");      rethrow;    }  }  static Future<List<ChatModel>> sendMessage(      {required String message, required String modelId}) async {    try {      var response = await http.post(Uri.parse('$BASE_URL/completions'),          headers: {            'Authorization': 'Bearer $Authorization',            'Content-Type': 'application/json',          },          body: jsonEncode(              {"model": modelId, "prompt": message, "max_tokens": 100}));      Map jsonResponse = jsonDecode(response.body);      print(jsonResponse.toString());      if (jsonResponse['error'] != null) {        print("Json Error $jsonResponse['error']['message']");        throw HttpException(jsonResponse['error']['message']);      }      List<ChatModel> chatList = [];      if (jsonResponse["choices"] != null &&          jsonResponse["choices"].length > 0) {        log('Json Response ${jsonResponse["choices"][0]["text"]}');        chatList = List.generate(            jsonResponse["choices"].length,            (index) => ChatModel(                msg: jsonResponse["choices"][index]["text"], chatIndex: 1));      }      return chatList;    } catch (e) {      log("error $e");      rethrow;    }  }}