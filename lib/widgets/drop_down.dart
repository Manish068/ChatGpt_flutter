import 'package:chatgpt/constant/constant.dart';import 'package:chatgpt/models/Models.dart';import 'package:chatgpt/providers/models_provider.dart';import 'package:chatgpt/services/api_service.dart';import 'package:chatgpt/widgets/text_widget.dart';import 'package:flutter/material.dart';import 'package:provider/provider.dart';class ModalsDropDownWidget extends StatefulWidget {  ModalsDropDownWidget({Key? key}) : super(key: key);  @override  State<ModalsDropDownWidget> createState() => _ModalsDropDownWidgetState();}class _ModalsDropDownWidgetState extends State<ModalsDropDownWidget> {  String ?currentModal ;  @override  Widget build(BuildContext context) {    final modelsProvider = Provider.of<ModelsProvider>(context,listen: false);    currentModal = modelsProvider.getCurrentModel;    return FutureBuilder<List<ModelsModel>>(      future: modelsProvider.getAllModels(),      builder: (context, snapshot) {        if (snapshot.hasError) {          return Center(child: TextWidget(label: snapshot.error.toString()));        }        return snapshot.data == null || snapshot.data!.isEmpty            ? const SizedBox.shrink()            : FittedBox(                child: DropdownButton(                    dropdownColor: scaffoldBackgroundColor,                    iconEnabledColor: Colors.white,                    items: List<DropdownMenuItem<String>>.generate(                        snapshot.data!.length,                        (index) => DropdownMenuItem(                            value: snapshot.data![index].id,                            child: TextWidget(                              label: snapshot.data![index].id,                              fontSize: 15,                              color: Colors.white,                            ))),                    value: currentModal,                    onChanged: (item) {                      setState(() {                        currentModal = item.toString();                      });                      modelsProvider.setCurrentModel(item.toString());                    }));      },    );  }}